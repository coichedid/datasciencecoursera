getwd()
load(swirl)
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- dir()
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
play()
getwd()
nxt()
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path()
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create(path=file.path("testdir2","testdir3"),recursive = TRUE)
setwd(old.dir)
play()
?file.remove
getwd()
file.remove("testdir")
file.remove("testdir",recursive=TRUE)
nxt()
play()
rm(list=ls())
nxt()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_sec <- seq(5,10,length=30)
my_sec <- seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
play()
rm(my_sec)
nxt()
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse = " ")
my_name <- c(my_char,"Clovis Chedid")
my_name
paste(my_name,collapse = " ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep = "")
paste(LETTERS,1:4,sep="-")
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
bye()
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(data = 1:20,nrow = 4,ncol = 5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data) <- cnames
my_data
bye()
dir.create("Week_2")
ls()
dir()
getwd()
setwd("~/Projetos/Data_Science/datasciencecoursera/course2_R_Programming")
getwd()
dir.create("Week_2")
dir()
save.image("~/Projetos/Data_Science/datasciencecoursera/course2_R_Programming/Course2.RData")
setwd("./Week_2")
getwd()
?read.csv
read.csv("specdata/200.cvs", col.names = c("Date","sulfate","nitrate","ID"),colClasses = c(Date,numeric,numeric,integer))
read.csv("specdata/200.csv", col.names = c("Date","sulfate","nitrate","ID"),colClasses = c(Date,numeric,numeric,integer))
read.csv("specdata/200.csv", col.names = c("Date","sulfate","nitrate","ID"),colClasses = c("Date",numeric,numeric,integer))
read.csv("specdata/200.csv", col.names = c("Date","sulfate","nitrate","ID"),colClasses = c(Date,numeric,numeric,integer))
colclasses <- c("Date","numeric","numeric","integer")
colnames <- c("date","sulfate","nitrate","ID")
read.csv("specdata/200.csv",col.names = colnames,colClasses = colclasses)
data <- read.csv("specdata/200.csv",col.names = colnames,colClasses = colclasses)
head(data,5)
class(data[1,1])
files <- c(200,250,255)
files <- paste("specdata/",files,".csv",sepc="")
files <- paste("specdata/",files,".csv",sep="")
files <- c(200,250,255)
files <- paste("specdata/",files,".csv",sep="")
?lapply
?read.csv
data <- do.call(rbind,sapply(files,read.csv,header=TRUE,colClasses = colclasses))
head(data,5)
data <- do.call(rbind,sapply(files,read.csv,colClasses = colclasses))
data <- do.call(rbind,sapply(files,read.csv,col.names = colnames,colClasses = colclasses))
data <- read.csv("specdata/200.csv",col.names = colnames,colClasses = colclasses)
View(data)
data <- read.csv(files[1],col.names = colnames,colClasses = colclasses)
View(data)
data <- read.csv(files[2],col.names = colnames,colClasses = colclasses)
View(data)
data <- read.csv(files[3],col.names = colnames,colClasses = colclasses)
View(data)
?lapply
data <- do.call(rbind,lapply(files,read.csv,col.names = colnames,colClasses = colclasses))
View(data)
class(data)
dimnames(data)
getwd()
source("./pollutantemean.R")
source("./pollutantmean.R")
args(pollutantmean)
ids <- c(200,250,255)
ids <- 1:10
source("./pollutantmean.R")
pollutantmean("specdata","sulfate",ids)
source("./pollutantmean.R")
pollutantmean("specdata","sulfate",ids)
source("./pollutantmean.R")
getwd
getwd()
setwd("/Users/coichedid/Projetos/Data_Science/datasciencecoursera/course2_R_Programming/Week_2")
source("./pollutantmean.R")
pollutantmean("specdata","sulfate",ids)
getwd()
source("./pollutantmean.R")
pollutantmean("specdata","sulfate",ids)
colnames(data)
data$sulfate
v <- data$sulfate
v <- data["sulfate"]
v <- data$sulfate
v <- data[["sulfate"]]
bad <- is.na(data)
good <- data[!bad]
source("./pollutantmean.R")
pollutantmean("specdata","sulfate",ids)
ids<- 70:72
pollutantmean("specdata","sulfate",ids)
pollutantmean("specdata","nitrate",ids)
pollutantmean("specdata","nitrate",23)
library(data.table)
install.packages("data.table")
library(data.table)
?data.table
remove.packages("data.table")
library(data.table)
?read.csv
colclasses <- c("Date","numeric","numeric","integer")
files <- c(200,250,255)
files <- paste("specdata/",files,".csv",sep="")
data <- do.call(rbind,lapply(files,read.csv,colClasses = colclasses))
aggregate(nobs~ID,data = data,FUN = NROW)
install.packages("data.table")
install.packages("data.table")
detach("package:data.table",unload=TRUE)
detach_package <- function(pkg, character.only = FALSE)
{
if(!character.only)
{
pkg <- deparse(substitute(pkg))
}
search_item <- paste("package", pkg, sep = ":")
while(search_item %in% search())
{
detach(search_item, unload = TRUE, character.only = TRUE)
}
}
detach_package("data.table",TRUE)
library()
data.table
?data.table
remove.packages("data.table")
?data.table
.rs.restartR()
data.table
?data.table
aggregate(nobs~ID,data = data,FUN = NROW)
aggregate(nobs~ID,data = data,FUN = function(x){NROW(x)})
?aggregate
aggregate(ID,data = data,FUN = function(x){NROW(x)})
aggregate(count,data = data,FUN = function(x){NROW(x)})
aggregate(data,by)
aggregate(data,by=ID,NROW)
aggregate(data,by=list(ID),NROW)
aggregate(data,by=list(ID),NROW)
aggregate(x = data,by = list(unique.values = data$ID), FUN=NROW)
files <- c("001")
files <- paste("specdata/",files,".csv",sep="")
data <- do.call(rbind,lapply(files,read.csv,colClasses=colclasses))
aggregate(x = data,by = list(unique.values = data$ID), FUN=NROW)
aggregate(x = data,by = list(unique.values = data$ID), FUN=NROW, na.rm=TRUE)
badData <- is.na(data)
goodData <- data[badData]
goodData <- data[!badData]
aggregate(x = goodData,by = list(unique.values = data$ID), FUN=NROW, na.rm=TRUE)
aggregate(x = goodData,by = list(unique.values = data$ID), FUN=NROW)
aggregate(x = goodData,by = list(unique.values = goodData$ID), FUN=NROW)
goodData <- complete.cases(data)
data[goodData,]
NROW(data[goodData,])
goodData <- data[complete.cases(data),]
aggregate(x = goodData,by = list(unique.values = goodData$ID), FUN=NROW)
aggregate(x = goodData,by = list(unique.values = goodData$ID), FUN=NROW)[,c(5,1,-2,-3,-4)]
cols <- c("ID","nobs")
counts <- aggregate(x = goodData,by = list(unique.values = goodData$ID), FUN=NROW)[cols]
counts <- aggregate(x = goodData,by = list(nobs = goodData$ID), FUN=NROW)[cols]
counts
class(counts)
colnames(counts) <- c("id","nobs")
counts
counts <- aggregate(x = goodData,by = list(nobs = goodData$ID), FUN=NROW)[,cols]
counts
getwd()
source("./pollutantmean.R")
source("./complete.R")
pollutantmean("specdata", "sulfate", 1:10)
complete("specdata",1)
complete("specdata",c(2,4,8,10,12))
cols <- c("ID","nobs")
source("./pollutantmean.R")
source("./complete.R")
complete("specdata",1)
source("./complete.R")
complete("specdata",1)
source("./complete.R")
complete("specdata",1)
source("./complete.R")
complete("specdata",1)
complete("specdata",1)
source("./complete.R")
complete("specdata",1)
aggr <- complete("specdata",1)
aggr[["ID"]]
values <- data.frame(value = c("a", "a", "a", "a", "a",
"b", "b", "b",
"c", "c", "c", "c"))
nr.of.appearances <- aggregate(x = values,
by = list(unique.values = values$value),
FUN = length)
nr.of.appearances <- aggregate(x = values,
by = list(unique.values = values$value),
FUN = length)
nr.of.appearances
complete("specdata",1)
source("./complete.R")
complete("specdata",1)
source("./complete.R")
complete("specdata",1)
source("./complete.R")
complete("specdata",1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
source("./complete.R")
complete("specdata",1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata",3)
?list.files
id <- complete("specdata")
id <- complete("specdata")["id"]
class(id)
id <- complete("specdata")[["id"]]
class(id)
id <- complete("specdata")[nobs > 50]
id <- complete("specdata")[which(nobs > 50)]
dat <- complete("specdata")
class(dat)
id <- dat[which(nobs > 50),]
id <- dat[which(dat$nobs > 50),]
id <- dat[which(dat$nobs > 50),id]
id <- dat[which(dat$nobs > 50),"id"]
class(id)
?cor
source('./complete.R')
source('./corr.R')
a <- corr("specdata",5000)
length(a)
a <- corr("specdata",150)
head(a)
source('./corr.R')
a <- corr("specdata",150)
files <- complete("specdata")
threashold <- 150
id <- files[which(files$nobs > threshold),"id"]
threshold <- 150
id <- files[which(files$nobs > threshold),"id"]
library(stringr)
normIds <- str_pad(id,3,pad = "0")
files2 <- paste(directory,"/",normIds,".csv",sep="")
data <- do.call(rbind,lapply(files,read.csv,colClasses = colclasses))
files2 <- paste(,"/",normIds,".csv",sep="")
data <- do.call(rbind,lapply(files,read.csv,colClasses = colclasses))
files <- paste(directory,"/",normIds,".csv",sep="")
threshold <- 150
directory <- "specdata"
colclasses <- c("Date","numeric","numeric","integer")
threshold <- 150
directory <- "specdata"
source("./complete.R")
source("./corr.R")
if (length(id) == 0) {
if (length(id) == 0) {
if (length(id) == 0) {
next()
library(stringr)
